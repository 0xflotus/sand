// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/sand/network/overlay (interfaces: Registrar)

// Package overlaymock is a generated GoMock package.
package overlaymock

import (
	reflect "reflect"

	store "github.com/Scalingo/sand/store"
	gomock "github.com/golang/mock/gomock"
)

// MockRegistrar is a mock of Registrar interface
type MockRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrarMockRecorder
}

// MockRegistrarMockRecorder is the mock recorder for MockRegistrar
type MockRegistrarMockRecorder struct {
	mock *MockRegistrar
}

// NewMockRegistrar creates a new mock instance
func NewMockRegistrar(ctrl *gomock.Controller) *MockRegistrar {
	mock := &MockRegistrar{ctrl: ctrl}
	mock.recorder = &MockRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrar) EXPECT() *MockRegistrarMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegistrar) Register(arg0 string) (store.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(store.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRegistrarMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrar)(nil).Register), arg0)
}
