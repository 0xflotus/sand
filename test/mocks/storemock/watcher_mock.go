// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/sand/store (interfaces: Watcher)

// Package storemock is a generated GoMock package.
package storemock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/clientv3"
)

// MockWatcher is a mock of Watcher interface
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWatcher)(nil).Close))
}

// NextResponse mocks base method
func (m *MockWatcher) NextResponse() (clientv3.WatchResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextResponse")
	ret0, _ := ret[0].(clientv3.WatchResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// NextResponse indicates an expected call of NextResponse
func (mr *MockWatcherMockRecorder) NextResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResponse", reflect.TypeOf((*MockWatcher)(nil).NextResponse))
}
