// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/sand/ipallocator (interfaces: IPAllocator)

// Package ipallocatormock is a generated GoMock package.
package ipallocatormock

import (
	context "context"
	reflect "reflect"

	ipallocator "github.com/Scalingo/sand/ipallocator"
	gomock "github.com/golang/mock/gomock"
)

// MockIPAllocator is a mock of IPAllocator interface
type MockIPAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockIPAllocatorMockRecorder
}

// MockIPAllocatorMockRecorder is the mock recorder for MockIPAllocator
type MockIPAllocatorMockRecorder struct {
	mock *MockIPAllocator
}

// NewMockIPAllocator creates a new mock instance
func NewMockIPAllocator(ctrl *gomock.Controller) *MockIPAllocator {
	mock := &MockIPAllocator{ctrl: ctrl}
	mock.recorder = &MockIPAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPAllocator) EXPECT() *MockIPAllocatorMockRecorder {
	return m.recorder
}

// AllocateIP mocks base method
func (m *MockIPAllocator) AllocateIP(arg0 context.Context, arg1 string, arg2 ipallocator.AllocateIPOpts) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIP indicates an expected call of AllocateIP
func (mr *MockIPAllocatorMockRecorder) AllocateIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIP", reflect.TypeOf((*MockIPAllocator)(nil).AllocateIP), arg0, arg1, arg2)
}

// ReleaseIP mocks base method
func (m *MockIPAllocator) ReleaseIP(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIP indicates an expected call of ReleaseIP
func (mr *MockIPAllocatorMockRecorder) ReleaseIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockIPAllocator)(nil).ReleaseIP), arg0, arg1, arg2)
}

// ReleasePool mocks base method
func (m *MockIPAllocator) ReleasePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePool indicates an expected call of ReleasePool
func (mr *MockIPAllocatorMockRecorder) ReleasePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePool", reflect.TypeOf((*MockIPAllocator)(nil).ReleasePool), arg0, arg1)
}
